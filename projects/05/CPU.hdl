// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A-instruction: `0vvvvvvvvvvvvvvv`
    // C-instruction: `111accccccdddjjj`


    Not(in=instruction[15], out=aInstruction);
    Mux16(a=outALU ,b=instruction ,sel=aInstruction ,out=muxInstructionALU); 
    Or(a=aInstruction ,b=instruction[5] ,out=storeA);
    ARegister(in=muxInstructionALU ,load=storeA ,out=outA, out[0..14]=addressM);
    DRegister(in=outALU ,load=instruction[4] ,out=outD);
    Mux16(a=outA ,b=inM ,sel=instruction[12] ,out=muxAM); 
    ALU(x=outD ,y=muxAM,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outALU, out=outM ,zr=zr ,ng=ng);
    And(a=instruction[3], b=instruction[15] ,out=writeM); 

    // Jump
    Or(a=zr, b=ng, out=orZrNg);
    Not(in=orZrNg, out=g);

    And(a=instruction[0], b=g, out=gt);
    And(a=instruction[1], b=zr, out=eq);
    And(a=instruction[2], b=ng, out=lt);
    Or(a=gt, b=eq, out=orGtEq);
    Or(a=orGtEq, b=lt, out=orGtEqLt);
    And(a=orGtEqLt, b=instruction[15], out=jmp);
    
    PC(in=outA, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}